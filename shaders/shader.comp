#version 450

// STRUCTS
struct Ray {
    vec3 origin;
    vec3 direction;
};

struct HitRecord {
    bool doesHit;
    float t;
    vec3 point;
    vec3 normal;
    bool frontFace;
    uint materialIndex;
};

struct ScatterRecord {
    bool doesScatter;
    vec3 attenuation;
    vec3 scatterDirection;
};

struct Sphere {
    vec3 center;
    float radius;
    uint materialIndex;
};

struct Material {
    uint type;
    vec3 attenuation;
    float specificAttribute;// metal: "fuzz", refractive: "refraction index"
};

struct Camera {
    float fov;
    float aperture;
    float focusDistance;
    vec3 lookFrom;
    vec3 lookAt;
    vec3 up;
};

struct Viewport {
    vec3 horizontal;
    vec3 vertical;
    vec3 upperLeftCorner;
    vec3 cameraUp;
    vec3 cameraRight;
};

// INPUTS
layout(binding = 0, rgba8_snorm) uniform writeonly image2D renderTarget;

layout(binding = 1) uniform Scene {
    uint sphereAmount;
    Sphere spheres[500];
    Material materials[500];
} scene;


// ENUMS
const uint MATERIAL_TYPE_DIFFUSE = 0;
const uint MATERIAL_TYPE_METAL = 1;
const uint MATERIAL_TYPE_REFRACTIVE = 2;

// CONSTANTS
const float MAX_RAY_COLLISION_DISTANCE = 100000000.0f;
const uint SAMPLES = 1000;
const uint MAX_DEPTH = 50;
const vec3 BACKGROUND_COLOR = vec3(0.70f, 0.80f, 1.00f);

const Camera camera = Camera(25.0f, 0.0f, 10.0f, vec3(13.0f, 2.0f, -3.0f), vec3(0.0f), vec3(0.0f, 1.0f, 0.0f));


// METHODS
vec3 calculateRayColor(in Ray ray);
ScatterRecord scatter(const Ray ray, const HitRecord record);
vec3 rayAt(const Ray ray, const float t);
HitRecord hitSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax);
HitRecord hitAnySphere(const Ray ray, const float tMin, const float tMax);
float random();
float randomInInterval(const float min, const float max);
vec3 randomVector(const float min, const float max);
vec3 randomUnitVector();
bool isVectorNearZero(const vec3 vector);
bool canRefract(const vec3 vector, const vec3 normal, const float eta);
float reflectanceFactor(const vec3 vector, const vec3 normal, const float eta);
Viewport calculateViewport(const float aspectRatio);
Ray getCameraRay(const Viewport viewport, const vec2 uv);


// MAIN
layout(local_size_x = 16, local_size_y = 16) in;

void main() {
    const vec2 imageSize = vec2(imageSize(renderTarget));
    const float aspectRatio = imageSize.x / imageSize.y;

    const Viewport viewport = calculateViewport(aspectRatio);

    vec3 summedPixelColor = vec3(0.0f);
    for (uint i = 0; i < SAMPLES; i++) {
        const float u = (gl_GlobalInvocationID.x + random()) / imageSize.x;
        const float v = (gl_GlobalInvocationID.y + random()) / imageSize.y;
        Ray ray = getCameraRay(viewport, vec2(u, v));

        summedPixelColor += calculateRayColor(ray);
    }

    const vec3 pixelColor = sqrt(summedPixelColor / float(SAMPLES));

    imageStore(renderTarget, ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor, 1.0f));
}


// RENDERING
vec3 calculateRayColor(in Ray ray) {
    vec3 reflectedColor = vec3(1.0f);
    vec3 lightSourceColor = vec3(0.0f);// black, if ray exceeds bounce limit

    for (uint depth = 0; depth < MAX_DEPTH; depth++) {
        HitRecord record = hitAnySphere(ray, 0.001f, MAX_RAY_COLLISION_DISTANCE);

        if (!record.doesHit) {
            lightSourceColor = BACKGROUND_COLOR;
            break;
        }

        ScatterRecord scatterRecord = scatter(ray, record);
        if (scatterRecord.doesScatter) {
            reflectedColor *= scatterRecord.attenuation;
            ray = Ray(record.point, normalize(scatterRecord.scatterDirection));
        } else {
            lightSourceColor = vec3(0.0f);
            break;
        }
    }

    return reflectedColor * lightSourceColor;
}

ScatterRecord scatterMaterialDiffuse(const Ray ray, const HitRecord record, const Material material);
ScatterRecord scatterMaterialMetal(const Ray ray, const HitRecord record, const Material material);
ScatterRecord scatterMaterialRefractive(const Ray ray, const HitRecord record, const Material material);

ScatterRecord scatter(const Ray ray, const HitRecord record) {
    const Material material = scene.materials[record.materialIndex];

    if (material.type == MATERIAL_TYPE_DIFFUSE) {
        return scatterMaterialDiffuse(ray, record, material);

    } else if (material.type == MATERIAL_TYPE_METAL) {
        return scatterMaterialMetal(ray, record, material);

    } else if (material.type == MATERIAL_TYPE_REFRACTIVE) {
        return scatterMaterialRefractive(ray, record, material);

    }

    return ScatterRecord(false, vec3(0.0f), vec3(0.0f));
}


// RAY
vec3 rayAt(const Ray ray, const float t) {
    return ray.origin + t * ray.direction;
}

// SCATTER
ScatterRecord scatterMaterialDiffuse(const Ray ray, const HitRecord record, const Material material) {
    vec3 scatterDirection = record.normal + randomUnitVector();

    if (isVectorNearZero(scatterDirection)) {
        scatterDirection = record.normal;
    }

    return ScatterRecord(true, material.attenuation.rgb, scatterDirection);
}

ScatterRecord scatterMaterialMetal(const Ray ray, const HitRecord record, const Material material) {
    const vec3 reflectedDirection = reflect(ray.direction, record.normal);
    const vec3 fuzzDireciton = material.specificAttribute * randomUnitVector();
    const vec3 scatterDirection = normalize(reflectedDirection + fuzzDireciton);

    const bool doesScatter = dot(scatterDirection, record.normal) > 0.0f;
    return ScatterRecord(doesScatter, material.attenuation.rgb, scatterDirection);
}

ScatterRecord scatterMaterialRefractive(const Ray ray, const HitRecord record, const Material material) {
    const float eta = record.frontFace ? (1.0f / material.specificAttribute) : material.specificAttribute;
    const bool doesRefract = canRefract(ray.direction, record.normal, eta) && reflectanceFactor(ray.direction, record.normal, eta) < random();

    vec3 scatterDirection;

    if (doesRefract) {
        scatterDirection = refract(ray.direction, record.normal, eta);
    } else {
        scatterDirection = reflect(ray.direction, record.normal);
    }

    return ScatterRecord(true, material.attenuation.rgb, scatterDirection);
}


// SPHERE
HitRecord hitSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
    const vec3 CO = ray.origin - sphere.center.xyz;
    const float a = dot(ray.direction, ray.direction);
    const float halfB = dot(CO, ray.direction);
    const float c = dot(CO, CO) - sphere.radius * sphere.radius;

    const float D = halfB * halfB - a * c;

    if (D < 0) {
        return HitRecord(false, 0.0f, vec3(0.0f), vec3(0.0f), true, 0);
    }

    const float t1 = (-halfB - sqrt(D)) / a;
    const float t2 = (-halfB + sqrt(D)) / a;

    float t;

    if (t1 >= tMin && t1 <= tMax) {
        t = t1;
    } else if (t2 >= tMin && t2 <= tMax) {
        t = t2;
    } else {
        return HitRecord(false, 0.0f, vec3(0.0f), vec3(0.0f), true, 0);
    }

    const vec3 point = rayAt(ray, t);
    const vec3 outwardNormal = normalize(point - sphere.center.xyz);
    const bool frontFace = dot(ray.direction, outwardNormal) < 0.0f;
    const vec3 normal = frontFace ? outwardNormal : -outwardNormal;

    return HitRecord(true, t, point, normal, frontFace, sphere.materialIndex);
}

HitRecord hitAnySphere(const Ray ray, const float tMin, const float tMax) {
    HitRecord record = HitRecord(false, tMax, vec3(0.0f), vec3(0.0f), true, 0);

    for (uint i = 0; i < scene.sphereAmount; i++) {
        HitRecord tempRecord = hitSphere(ray, scene.spheres[i], tMin, record.t);
        if (tempRecord.doesHit) {
            record = tempRecord;
        }
    }

    return record;
}


// RANDOM
uint hash(uint x) {
    x += (x << 10u);
    x ^= (x >>  6u);
    x += (x <<  3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

uint currentRandomOffset = 0;

float random() {
    currentRandomOffset += 1;
    const uvec3 v = floatBitsToUint(vec3(gl_GlobalInvocationID.xy, currentRandomOffset));

    uint m = hash(v.x ^ hash(v.y) ^ hash(v.z));
    m &= 0x007FFFFFu;
    m |= 0x3F800000u;
    return uintBitsToFloat(m) - 1.0f;
}

float randomInInterval(const float min, const float max) {
    return random() * (max - min) + min;
}

vec3 randomVector(const float min, const float max) {
    return vec3(randomInInterval(min, max), randomInInterval(min, max), randomInInterval(min, max));
}

vec3 randomUnitVector() {
    return normalize(randomVector(-1.0f, 1.0f));
}


// UTILITY
bool isVectorNearZero(const vec3 vector) {
    const float s = 1e-8;
    return abs(vector.x) < s && abs(vector.y) < s && abs(vector.z) < s;
}

bool canRefract(const vec3 vector, const vec3 normal, const float eta) {
    const float cosTheta = dot(-vector, normal);
    return eta * sqrt(1.0f - cosTheta * cosTheta) <= 1.0f;
}

float reflectanceFactor(const vec3 vector, const vec3 normal, const float eta) {
    const float r = pow((1.0f - eta) / (1.0f + eta), 2.0f);
    return r + (1.0f - r) * pow(1.0f - dot(-vector, normal), 5.0f);
}

// VIEWPORT
Viewport calculateViewport(const float aspectRatio) {
    const float viewportHeight = tan(radians(camera.fov) / 2.0f) * 2.0f;
    const float viewportWidth = aspectRatio * viewportHeight;

    const vec3 cameraForward = normalize(camera.lookAt - camera.lookFrom);
    const vec3 cameraRight = normalize(cross(camera.up, cameraForward));
    const vec3 cameraUp = normalize(cross(cameraForward, cameraRight));

    const vec3 horizontal = viewportWidth * cameraRight * camera.focusDistance;
    const vec3 vertical = viewportHeight * cameraUp * camera.focusDistance;
    const vec3 upperLeftCorner = camera.lookFrom - horizontal / 2.0f + vertical / 2.0f + cameraForward * camera.focusDistance;

    return Viewport(horizontal, vertical, upperLeftCorner, cameraUp, cameraRight);
}

Ray getCameraRay(const Viewport viewport, const vec2 uv) {
    const vec2 random = (camera.aperture / 2.0f) * normalize(vec2(randomInInterval(-1.0f, 1.0f), randomInInterval(-1.0f, 1.0f)));
    const vec3 offset = viewport.cameraRight * random.x + viewport.cameraUp * random.y;

    const vec3 from = camera.lookFrom + offset;
    const vec3 to = viewport.upperLeftCorner + viewport.horizontal * uv.x - viewport.vertical * uv.y;

    return Ray(from, normalize(to - from));
}
